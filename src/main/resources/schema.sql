drop table if exists users, mpa, films, likes, genres, film_genres, friends,
directors, directors_film, reviews, users_reviews_rates, users_events;

create table if not exists users (
	id integer generated by default as identity not null primary key,
	login varchar(255) not null unique,
	name varchar(255) not null,
	email varchar(255) not null unique,
	birthday date
);

create table if not exists mpa (
	id integer generated by default as identity not null primary key,
	name varchar(255) not null unique
);

create table if not exists directors (
director_id integer not null auto_increment,
director_name varchar(128) not null unique,
primary key (director_id)
);

create table if not exists films (
	id integer generated by default as identity not null primary key,
	name varchar(255) not null,
	releaseDate date not null,
	description varchar(200),
	duration integer not null,
	mpa_id integer not null references mpa(id)
);

create table if not exists directors_film (
film_id integer not null references films(id) on delete cascade on update cascade,
director_id integer not null references directors(director_id) on delete cascade on update cascade,
primary key (film_id, director_id)
);

create table if not exists marks (
	user_id integer not null references users(id) on delete cascade,
	film_id integer not null references films(id) on delete cascade,
	mark real not null CHECK (mark > 0 AND mark <= 10),
	primary key (user_id, film_id)
);

create table if not exists genres (
	id integer generated by default as identity not null primary key,
	name varchar(255) not null unique
);

create table if not exists film_genres (
	film_id integer not null references films(id) on delete cascade,
	genre_id integer not null references genres(id) on delete cascade,
	primary key (film_id, genre_id)
);

create table if not exists friends (
	user_id integer not null references users(id) on delete cascade,
	friend_id integer not null references users(id) on delete cascade,
	primary key (user_id, friend_id)
);

create table if not exists reviews (
    id integer generated by default as identity not null primary key,
    content varchar(255) not null,
    isPositive boolean not null,
    user_id integer not null references users(id) on delete cascade,
    film_id integer not null references films(id) on delete cascade,
    useful integer
);

create table if not exists users_reviews_rates (
    user_id integer not null references users(id) on delete cascade,
    review_id integer not null references reviews(id) on delete cascade,
    isPositive boolean not null,
    primary key (user_id, review_id)
);

create table if not exists users_events (
    event_id integer generated by default as identity not null primary key,
    user_id integer not null references users(id) on delete cascade,
    event_type varchar(255) not null check (event_type in ('MARK', 'REVIEW', 'FRIEND')),
    operation varchar(255) not null check (operation in ('ADD', 'REMOVE', 'UPDATE')),
    entity_id integer not null,
    timestamp bigint not null
);
